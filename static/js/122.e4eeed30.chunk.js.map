{"version":3,"file":"static/js/122.e4eeed30.chunk.js","mappings":"qKACIA,EAAM,KAEJC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIAC,EAAU,mCAAG,WAAMC,GAAN,4EACI,WAAX,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQC,QACVR,EAAM,gEACa,YAAX,OAANO,QAAM,IAANA,OAAA,EAAAA,EAAQC,QACVR,EAAG,oGAAgGO,EAAOE,SACvF,aAAX,OAANF,QAAM,IAANA,OAAA,EAAAA,EAAQC,QACVR,EAAG,6CAAyCO,EAAOG,SAAhD,oBACgB,aAAX,OAANH,QAAM,IAANA,OAAA,EAAAA,EAAQC,QACVR,EAAG,6CAAyCO,EAAOG,SAAhD,4BACgB,YAAX,OAANH,QAAM,IAANA,OAAA,EAAAA,EAAQC,QACVR,EAAG,6CAAyCO,EAAOG,SAAhD,mCACgB,YAAX,OAANH,QAAM,IAANA,OAAA,EAAAA,EAAQC,QACVR,EAAG,6CAAyCO,EAAOG,SAAhD,YAZY,SAeVV,EAfU,kEAgBIW,MAAMX,EAAKC,GAhBf,eAgBTW,EAhBS,OAiBfC,QAAQC,IAAI,YAAaF,GAjBV,UAkBQA,EAAKG,OAlBb,eAkBTC,EAlBS,YAmBfH,QAnBe,UAmBmCG,EAnBnC,gCAmBPF,IAnBO,UAmBH,+BAnBG,gBAoBFE,EApBE,2EAsBfH,QAAQC,IAAR,MAtBe,0DAAH,sDA0BhB,K,+ICIA,EAtCgB,WACd,OAA0CG,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAEMZ,GAASa,EAAAA,EAAAA,MACTC,EAASd,EAAOe,QAoBtB,OAnBAT,QAAQC,IAAI,sBAAuBP,IAEnCgB,EAAAA,EAAAA,YAAU,WAAM,wCAEd,qGACyBjB,EAAAA,EAAAA,GAAW,CAChCE,KAAM,SACNE,SAAUW,IAHd,OACQL,EADR,OAKEH,QAAQC,IAAI,gCAAiCE,GAE7CG,EAAiBH,EAASQ,SAP5B,4CAFc,sBAYc,IAAzBN,EAAcO,QAZF,WAAD,wBAYiBC,EAGhC,GAAE,CAACL,EAAQH,IAGVA,IACE,wBACGA,EAAcS,KAAI,SAAAC,GAAM,OACvB,2BACE,oCAAYA,EAAOC,WACnB,qCAAcD,EAAOE,aAFdF,EAAOG,GADO,KAShC,C,sBCxCD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/API/api.js","components/Reviews/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// const BASE_URL = 'https://api.themoviedb.org/3/trending/movie'\nlet url = null;\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZmE4YzE2NTE5Mzk1NjVmMjI4MWU1MDY0MzJjYWIwMyIsInN1YiI6IjY0NzRlZTJjOTI0Y2U2MDBkY2IyODliYSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.2X4n5YSX4hGgZkP27xnajtjEfUPUoPxkoDMVouWB-ek',\n  },\n};\n// 569094\nconst searchFilm = async params => {\n  if (params?.type === 'trend')\n    url = 'https://api.themoviedb.org/3/trending/all/day?language=en-US';\n  if (params?.type === 'movies')\n    url = `https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1&query=${params.search}`;\n  if (params?.type === 'details')\n    url = `https://api.themoviedb.org/3/movie/${params.searchId}?language=en-US`;\n  if (params?.type === 'credits')\n    url = `https://api.themoviedb.org/3/movie/${params.searchId}/credits?language=en-US`;\n  if (params?.type === 'review')\n    url = `https://api.themoviedb.org/3/movie/${params.searchId}/reviews?language=en-US&page=1`;\n  if (params?.type === 'images')\n    url = `https://api.themoviedb.org/3/movie/${params.searchId}/images`;\n\n  try {\n    if (!url) return;\n    const data = await fetch(url, options);\n    console.log('data :>> ', data);\n    const response = await data.json();\n    console.log('response in api .json() :>> ', await response);\n    return await response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default searchFilm;\n\n// 1\n// fetch('https://api.themoviedb.org/3/trending/movie/day?language=en-US', options)\n//   .then(response => response.json())\n//   .then(response => console.log(response))\n//   .catch(err => console.error(err));\n\n// 2\n// fetch('https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1&query=batman', options)\n\n// 3\n// fetch('https://api.themoviedb.org/3/movie/movie_id?language=en-US', options)\n\n// 4\n// fetch('https://api.themoviedb.org/3/movie/movie_id/credits?language=en-US', options)\n\n// 5\n// fetch('https://api.themoviedb.org/3/movie/movie_id/reviews?language=en-US&page=1', options)\n\n// images\n// fetch('https://api.themoviedb.org/3/movie/movie_id/images', options)\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport searchFilm from 'components/API/api';\n\nconst Reviews = () => {\n  const [searchReviews, setSearchReviews] = useState([]);\n\n  const params = useParams();\n  const filmId = params.movieId;\n  console.log('response in reviews', params);\n\n  useEffect(() => {\n    \n    async function fetchData() {\n      const response = await searchFilm({\n        type: 'review',\n        searchId: filmId,\n      });\n      console.log('response in details page :>> ', response);\n\n      setSearchReviews(response.results);\n    }\n\n    if(searchReviews.length === 0) fetchData()\n    \n    \n  }, [filmId, searchReviews]);\n\n  return (\n    searchReviews && (\n      <ul>\n        {searchReviews.map(review => (\n          <li key={review.id}>\n            <p>Author: {review.author}</p>\n            <p>Content: { review.content}</p>\n          </li>\n        ))}\n      </ul>\n    )\n  );\n};\n\nexport default Reviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["url","options","method","headers","accept","Authorization","searchFilm","params","type","search","searchId","fetch","data","console","log","json","response","useState","searchReviews","setSearchReviews","useParams","filmId","movieId","useEffect","results","length","fetchData","map","review","author","content","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}